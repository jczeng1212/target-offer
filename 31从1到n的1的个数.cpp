class Solution {
public:
     // 方法二　------　从数字规律入手　　--------//
    /*
设N = abcde ,其中abcde分别为十进制中各位上的数字。
如果要计算百位上1出现的次数，它要受到3方面的影响：百位上的数字，百位以下（低位）的数字，百位以上（高位）的数字。
① 如果百位上数字为0，百位上可能出现1的次数由更高位决定。比如：12013，则可以知道百位出现1的情况可能是：100~199，1100~1199,2100~2199，，...，11100~11199，一共1200个。可以看出是由更高位数字（12）决定，并且等于更高位数字（12）乘以 当前位数（100）。
② 如果百位上数字为1，百位上可能出现1的次数不仅受更高位影响还受低位影响。比如：12113，则可以知道百位受高位影响出现的情况是：100~199，1100~1199,2100~2199，，....，11100~11199，一共1200个。和上面情况一样，并且等于更高位数字（12）乘以 当前位数（100）。但同时它还受低位影响，百位出现1的情况是：12100~12113,一共114个，等于低位数字（113）+1。
③ 如果百位上数字大于1（2~9），则百位上出现1的情况仅由更高位决定，比如12213，则百位出现1的情况是：100~199,1100~1199，2100~2199，...，11100~11199,12100~12199,一共有1300个，并且等于更高位数字+1（12+1）乘以当前位数（100）。
*/ 
    int NumberOf1Between1AndN_Solution(int n) {
        int count = 0;//1的个数
        int i = 1;//当前位
        int current = 0,after = 0,before = 0;
        while((n/i)!= 0){           
            current = (n/i)%10; //高位数字
            before = n/(i*10); //当前位数字
            after = n-(n/i)*i; //低位数字
            //如果为0,出现1的次数由高位决定,等于高位数字 * 当前位数
            if (current == 0)
                count += before*i;
            //如果为1,出现1的次数由高位和低位决定,高位*当前位+低位+1
            else if(current == 1)
                count += before * i + after + 1;
            //如果大于1,出现1的次数由高位决定,//（高位数字+1）* 当前位数
            else{
                count += (before + 1) * i;
            }    
            //前移一位
            i = i*10;
        }
        return count;
    
    
     // 方法一：　直接法　------　：直接对每个数都判断有几个１，然后求和　--------//
     /*int numOfOne(int n) //复杂度：　log(n)
     {
         //　该函数的功能：任意一个数的１的个数
         int number = 0;            
         while(n!=0)
         {
             if(n%10 == 1)
                 number++; //求余：　得到个位数，判断是不是１
             n = n /10; //如果n>10，除以10，再循环求余的话，依次得到十位、百位的数字……
             // 比如1941 -> 求余：１；　除以１０->194, -> 19 -> 1 
         }
         return number;
     }
    int NumberOf1Between1AndN_Solution(int n)
    {
        int i;
        int sumOfOne = 0;
        for(i=1;i<=n;i++) //从１到n,每个数调用一下，看看有几个１，O(n*logn)
        {
            sumOfOne += numOfOne(i);
        }
        return sumOfOne;*/
    
    }
};
